# Download images and create custom dataset
import os
import requests
from PIL import Image
from io import BytesIO
from sklearn.model_selection import train_test_split

# 1. Define your image URLs for each class
image_urls = {
    'cat': [
       'https://www.orangepet.in/cdn/shop/articles/selective-closeup-cute-kitten-floor_1.jpg?v=1693461218',
      'https://i.guim.co.uk/img/media/327aa3f0c3b8e40ab03b4ae80319064e401c6fbc/377_133_3542_2834/master/3542.jpg?width=1200&height=1200&quality=85&auto=format&fit=crop&s=34d32522f47e4a67286f9894fc81c863'
    ],
    'dog': [
        'https://images.pexels.com/photos/1108099/pexels-photo-1108099.jpeg',
        'https://cdn.shopify.com/s/files/1/0086/0795/7054/files/Golden-Retriever.jpg?v=1645179525',
    ]
}

# 2. Set up dataset structure
base_dir = "my_dataset"
os.makedirs(base_dir, exist_ok=True)
subfolders = ['train', 'test']

# 3. Download and split images
for label, urls in image_urls.items():
    train_urls, test_urls = train_test_split(urls, test_size=0.2, random_state=42)

    for folder in subfolders:
        os.makedirs(os.path.join(base_dir, folder, label), exist_ok=True)

    # Download training images
    for i, url in enumerate(train_urls):
        try:
            response = requests.get(url)
            img = Image.open(BytesIO(response.content)).convert('RGB')
            img = img.resize((128, 128))
            save_path = os.path.join(base_dir, 'train', label, f"{label}_{i}.jpg")
            img.save(save_path)
        except Exception as e:
            print(f"Failed to download {url}: {e}")

    # Download testing images
    for i, url in enumerate(test_urls):
        try:
            response = requests.get(url)
            img = Image.open(BytesIO(response.content)).convert('RGB')
            img = img.resize((128, 128))
            save_path = os.path.join(base_dir, 'test', label, f"{label}_{i}.jpg")
            img.save(save_path)
        except Exception as e:
            print(f"Failed to download {url}: {e}")

# Display a few downloaded images
import matplotlib.pyplot as plt

def show_sample_images(folder, label, count=3):
    folder_path = os.path.join(base_dir, folder, label)
    images = os.listdir(folder_path)[:count]
    plt.figure(figsize=(10, 4))
    for i, img_file in enumerate(images):
        img_path = os.path.join(folder_path, img_file)
        img = Image.open(img_path)
        plt.subplot(1, count, i + 1)
        plt.imshow(img)
        plt.title(f"{label} {i}")
        plt.axis("off")
    plt.suptitle(f"Sample {label.capitalize()} Images from {folder} Set")
    plt.show()

# Show sample images
show_sample_images('train', 'cat')
show_sample_images('train', 'dog')

# --- TensorFlow Version ---
import tensorflow as tf

# Load dataset
train_ds = tf.keras.utils.image_dataset_from_directory(
    "my_dataset/train",
    image_size=(128, 128),
    batch_size=32
)

val_ds = tf.keras.utils.image_dataset_from_directory(
    "my_dataset/test",
    image_size=(128, 128),
    batch_size=32
)

# Get class names before normalizing pixel values
class_names = train_ds.class_names

# Normalize pixel values
train_ds = train_ds.map(lambda x, y: (x / 255.0, y))
val_ds = val_ds.map(lambda x, y: (x / 255.0, y))

# Build CNN model
model = tf.keras.Sequential([
    tf.keras.layers.Conv2D(32, 3, activation='relu', input_shape=(128, 128, 3)),
    tf.keras.layers.MaxPooling2D(),
    tf.keras.layers.Conv2D(64, 3, activation='relu'),
    tf.keras.layers.MaxPooling2D(),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(len(class_names))
])

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

history = model.fit(train_ds, validation_data=val_ds, epochs=5)

# Plot TensorFlow accuracy
plt.plot(history.history['accuracy'], label='TF Train Accuracy')
plt.plot(history.history['val_accuracy'], label='TF Val Accuracy')
plt.legend()
plt.title('TensorFlow Model Accuracy')
plt.show()

# Show predictions on test set
import numpy as np

for images, labels in val_ds.take(1):
    preds = model.predict(images)
    pred_labels = np.argmax(preds, axis=1)

    plt.figure(figsize=(10, 5))
    # Display up to 5 images, but not more than the number of images in the batch
    num_images_to_display = min(5, images.shape[0])
    for i in range(num_images_to_display):
        ax = plt.subplot(1, num_images_to_display, i + 1)
        plt.imshow(images[i].numpy().astype("uint8"))
        plt.title(f"Pred: {class_names[pred_labels[i]]}\nTrue: {class_names[labels[i]]}")
        plt.axis("off")
    plt.suptitle("TensorFlow Predictions on Test Images")
    plt.show()
